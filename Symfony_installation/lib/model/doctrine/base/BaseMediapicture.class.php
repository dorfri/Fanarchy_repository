<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Mediapicture', 'doctrine');

/**
 * BaseMediapicture
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $url
 * @property integer $width
 * @property integer $height
 * @property string $hovertext
 * @property string $onclickaction
 * @property integer $Exposuredata_id
 * @property Exposuredata $Exposuredata
 * @property Doctrine_Collection $Answer
 * @property Doctrine_Collection $Fangroup
 * @property Doctrine_Collection $Siteusers
 * @property Doctrine_Collection $Team
 * @property Doctrine_Collection $Vote
 * 
 * @method integer             getId()              Returns the current record's "id" value
 * @method string              getUrl()             Returns the current record's "url" value
 * @method integer             getWidth()           Returns the current record's "width" value
 * @method integer             getHeight()          Returns the current record's "height" value
 * @method string              getHovertext()       Returns the current record's "hovertext" value
 * @method string              getOnclickaction()   Returns the current record's "onclickaction" value
 * @method integer             getExposuredataId()  Returns the current record's "Exposuredata_id" value
 * @method Exposuredata        getExposuredata()    Returns the current record's "Exposuredata" value
 * @method Doctrine_Collection getAnswer()          Returns the current record's "Answer" collection
 * @method Doctrine_Collection getFangroup()        Returns the current record's "Fangroup" collection
 * @method Doctrine_Collection getSiteusers()       Returns the current record's "Siteusers" collection
 * @method Doctrine_Collection getTeam()            Returns the current record's "Team" collection
 * @method Doctrine_Collection getVote()            Returns the current record's "Vote" collection
 * @method Mediapicture        setId()              Sets the current record's "id" value
 * @method Mediapicture        setUrl()             Sets the current record's "url" value
 * @method Mediapicture        setWidth()           Sets the current record's "width" value
 * @method Mediapicture        setHeight()          Sets the current record's "height" value
 * @method Mediapicture        setHovertext()       Sets the current record's "hovertext" value
 * @method Mediapicture        setOnclickaction()   Sets the current record's "onclickaction" value
 * @method Mediapicture        setExposuredataId()  Sets the current record's "Exposuredata_id" value
 * @method Mediapicture        setExposuredata()    Sets the current record's "Exposuredata" value
 * @method Mediapicture        setAnswer()          Sets the current record's "Answer" collection
 * @method Mediapicture        setFangroup()        Sets the current record's "Fangroup" collection
 * @method Mediapicture        setSiteusers()       Sets the current record's "Siteusers" collection
 * @method Mediapicture        setTeam()            Sets the current record's "Team" collection
 * @method Mediapicture        setVote()            Sets the current record's "Vote" collection
 * 
 * @package    PhpProject2
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMediapicture extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mediapicture');
        $this->hasColumn('id', 'integer', 4, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 4,
             ));
        $this->hasColumn('url', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 100,
             ));
        $this->hasColumn('width', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 4,
             ));
        $this->hasColumn('height', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 4,
             ));
        $this->hasColumn('hovertext', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 200,
             ));
        $this->hasColumn('onclickaction', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 200,
             ));
        $this->hasColumn('Exposuredata_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Exposuredata', array(
             'local' => 'Exposuredata_id',
             'foreign' => 'id'));

        $this->hasMany('Answer', array(
             'local' => 'id',
             'foreign' => 'Mediapicture_id'));

        $this->hasMany('Fangroup', array(
             'local' => 'id',
             'foreign' => 'Mediapicture_id'));

        $this->hasMany('Siteusers', array(
             'local' => 'id',
             'foreign' => 'Profilepicture_id'));

        $this->hasMany('Team', array(
             'local' => 'id',
             'foreign' => 'Mediapicture_id'));

        $this->hasMany('Vote', array(
             'local' => 'id',
             'foreign' => 'Mediapicture_id'));
    }
}