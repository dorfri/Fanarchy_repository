<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PPI', 'doctrine');

/**
 * BasePPI
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $code
 * @property string $promotioncode
 * @property string $name
 * @property string $prodprice
 * @property date $startdate
 * @property date $enddate
 * @property timestamp $updateddt
 * @property string $description
 * @property string $prodduration
 * @property string $autorenew
 * @property enum $isactive
 * @property Doctrine_Collection $PaymentRegister
 * 
 * @method integer             getId()              Returns the current record's "id" value
 * @method string              getCode()            Returns the current record's "code" value
 * @method string              getPromotioncode()   Returns the current record's "promotioncode" value
 * @method string              getName()            Returns the current record's "name" value
 * @method string              getProdprice()       Returns the current record's "prodprice" value
 * @method date                getStartdate()       Returns the current record's "startdate" value
 * @method date                getEnddate()         Returns the current record's "enddate" value
 * @method timestamp           getUpdateddt()       Returns the current record's "updateddt" value
 * @method string              getDescription()     Returns the current record's "description" value
 * @method string              getProdduration()    Returns the current record's "prodduration" value
 * @method string              getAutorenew()       Returns the current record's "autorenew" value
 * @method enum                getIsactive()        Returns the current record's "isactive" value
 * @method Doctrine_Collection getPaymentRegister() Returns the current record's "PaymentRegister" collection
 * @method PPI                 setId()              Sets the current record's "id" value
 * @method PPI                 setCode()            Sets the current record's "code" value
 * @method PPI                 setPromotioncode()   Sets the current record's "promotioncode" value
 * @method PPI                 setName()            Sets the current record's "name" value
 * @method PPI                 setProdprice()       Sets the current record's "prodprice" value
 * @method PPI                 setStartdate()       Sets the current record's "startdate" value
 * @method PPI                 setEnddate()         Sets the current record's "enddate" value
 * @method PPI                 setUpdateddt()       Sets the current record's "updateddt" value
 * @method PPI                 setDescription()     Sets the current record's "description" value
 * @method PPI                 setProdduration()    Sets the current record's "prodduration" value
 * @method PPI                 setAutorenew()       Sets the current record's "autorenew" value
 * @method PPI                 setIsactive()        Sets the current record's "isactive" value
 * @method PPI                 setPaymentRegister() Sets the current record's "PaymentRegister" collection
 * 
 * @package    PhpProject2
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePPI extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ppi');
        $this->hasColumn('id', 'integer', 5, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 5,
             ));
        $this->hasColumn('code', 'string', 255, array(
             'default' => '',
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 255,
             ));
        $this->hasColumn('promotioncode', 'string', 50, array(
             'default' => '',
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 50,
             ));
        $this->hasColumn('name', 'string', 50, array(
             'default' => '',
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 50,
             ));
        $this->hasColumn('prodprice', 'string', 10, array(
             'default' => '',
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 10,
             ));
        $this->hasColumn('startdate', 'date', 25, array(
             'type' => 'date',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 25,
             ));
        $this->hasColumn('enddate', 'date', 25, array(
             'type' => 'date',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 25,
             ));
        $this->hasColumn('updateddt', 'timestamp', 25, array(
             'type' => 'timestamp',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 25,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             ));
        $this->hasColumn('prodduration', 'string', 3, array(
             'default' => '',
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 3,
             ));
        $this->hasColumn('autorenew', 'string', 1, array(
             'default' => 'N',
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 1,
             'length' => 1,
             ));
        $this->hasColumn('isactive', 'enum', 1, array(
             'default' => 1,
             'type' => 'enum',
             'notnull' => true,
             'values' => 
             array(
              0 => 0,
              1 => 1,
             ),
             'unsigned' => false,
             'fixed' => 0,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('PaymentRegister', array(
             'local' => 'id',
             'foreign' => 'ppi_id'));
    }
}