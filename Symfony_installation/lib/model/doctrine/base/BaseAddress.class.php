<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Address', 'doctrine');

/**
 * BaseAddress
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $address1
 * @property string $address2
 * @property string $postcode
 * @property integer $City_id
 * @property City $City
 * @property Doctrine_Collection $Segments
 * @property Doctrine_Collection $Fangroup
 * @property Doctrine_Collection $League
 * @property Doctrine_Collection $MtmSegment2address
 * @property Doctrine_Collection $Siteusers
 * @property Doctrine_Collection $Team
 * 
 * @method integer             getId()                 Returns the current record's "id" value
 * @method string              getAddress1()           Returns the current record's "address1" value
 * @method string              getAddress2()           Returns the current record's "address2" value
 * @method string              getPostcode()           Returns the current record's "postcode" value
 * @method integer             getCityId()             Returns the current record's "City_id" value
 * @method City                getCity()               Returns the current record's "City" value
 * @method Doctrine_Collection getSegments()           Returns the current record's "Segments" collection
 * @method Doctrine_Collection getFangroup()           Returns the current record's "Fangroup" collection
 * @method Doctrine_Collection getLeague()             Returns the current record's "League" collection
 * @method Doctrine_Collection getMtmSegment2address() Returns the current record's "MtmSegment2address" collection
 * @method Doctrine_Collection getSiteusers()          Returns the current record's "Siteusers" collection
 * @method Doctrine_Collection getTeam()               Returns the current record's "Team" collection
 * @method Address             setId()                 Sets the current record's "id" value
 * @method Address             setAddress1()           Sets the current record's "address1" value
 * @method Address             setAddress2()           Sets the current record's "address2" value
 * @method Address             setPostcode()           Sets the current record's "postcode" value
 * @method Address             setCityId()             Sets the current record's "City_id" value
 * @method Address             setCity()               Sets the current record's "City" value
 * @method Address             setSegments()           Sets the current record's "Segments" collection
 * @method Address             setFangroup()           Sets the current record's "Fangroup" collection
 * @method Address             setLeague()             Sets the current record's "League" collection
 * @method Address             setMtmSegment2address() Sets the current record's "MtmSegment2address" collection
 * @method Address             setSiteusers()          Sets the current record's "Siteusers" collection
 * @method Address             setTeam()               Sets the current record's "Team" collection
 * 
 * @package    PhpProject2
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAddress extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('address');
        $this->hasColumn('id', 'integer', 4, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 4,
             ));
        $this->hasColumn('address1', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 50,
             ));
        $this->hasColumn('address2', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 50,
             ));
        $this->hasColumn('postcode', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 50,
             ));
        $this->hasColumn('City_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('City', array(
             'local' => 'City_id',
             'foreign' => 'id'));

        $this->hasMany('Segment as Segments', array(
             'refClass' => 'MtmSegment2address',
             'local' => 'address_id',
             'foreign' => 'segment_id'));

        $this->hasMany('Fangroup', array(
             'local' => 'id',
             'foreign' => 'Address_id'));

        $this->hasMany('League', array(
             'local' => 'id',
             'foreign' => 'Address_id'));

        $this->hasMany('MtmSegment2address', array(
             'local' => 'id',
             'foreign' => 'address_id'));

        $this->hasMany('Siteusers', array(
             'local' => 'id',
             'foreign' => 'Address_id'));

        $this->hasMany('Team', array(
             'local' => 'id',
             'foreign' => 'Homeaddress_id'));
    }
}