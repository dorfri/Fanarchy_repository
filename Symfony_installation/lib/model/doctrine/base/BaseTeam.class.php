<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Team', 'doctrine');

/**
 * BaseTeam
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $websiteurl
 * @property string $stadiumname
 * @property string $phonenumber
 * @property string $fax
 * @property timestamp $createddate
 * @property integer $Sporttype_id
 * @property integer $League_id
 * @property integer $Mediapicture_id
 * @property integer $Homeaddress_id
 * @property Sporttype $Sporttype
 * @property League $League
 * @property Mediapicture $Mediapicture
 * @property Address $Address
 * @property Doctrine_Collection $SiteUsers
 * @property Doctrine_Collection $Fangroup
 * @property Doctrine_Collection $MtmSiteusers2team
 * @property Doctrine_Collection $Sitevars
 * @property Doctrine_Collection $Vote
 * 
 * @method integer             getId()                Returns the current record's "id" value
 * @method string              getName()              Returns the current record's "name" value
 * @method string              getWebsiteurl()        Returns the current record's "websiteurl" value
 * @method string              getStadiumname()       Returns the current record's "stadiumname" value
 * @method string              getPhonenumber()       Returns the current record's "phonenumber" value
 * @method string              getFax()               Returns the current record's "fax" value
 * @method timestamp           getCreateddate()       Returns the current record's "createddate" value
 * @method integer             getSporttypeId()       Returns the current record's "Sporttype_id" value
 * @method integer             getLeagueId()          Returns the current record's "League_id" value
 * @method integer             getMediapictureId()    Returns the current record's "Mediapicture_id" value
 * @method integer             getHomeaddressId()     Returns the current record's "Homeaddress_id" value
 * @method Sporttype           getSporttype()         Returns the current record's "Sporttype" value
 * @method League              getLeague()            Returns the current record's "League" value
 * @method Mediapicture        getMediapicture()      Returns the current record's "Mediapicture" value
 * @method Address             getAddress()           Returns the current record's "Address" value
 * @method Doctrine_Collection getSiteUsers()         Returns the current record's "SiteUsers" collection
 * @method Doctrine_Collection getFangroup()          Returns the current record's "Fangroup" collection
 * @method Doctrine_Collection getMtmSiteusers2team() Returns the current record's "MtmSiteusers2team" collection
 * @method Doctrine_Collection getSitevars()          Returns the current record's "Sitevars" collection
 * @method Doctrine_Collection getVote()              Returns the current record's "Vote" collection
 * @method Team                setId()                Sets the current record's "id" value
 * @method Team                setName()              Sets the current record's "name" value
 * @method Team                setWebsiteurl()        Sets the current record's "websiteurl" value
 * @method Team                setStadiumname()       Sets the current record's "stadiumname" value
 * @method Team                setPhonenumber()       Sets the current record's "phonenumber" value
 * @method Team                setFax()               Sets the current record's "fax" value
 * @method Team                setCreateddate()       Sets the current record's "createddate" value
 * @method Team                setSporttypeId()       Sets the current record's "Sporttype_id" value
 * @method Team                setLeagueId()          Sets the current record's "League_id" value
 * @method Team                setMediapictureId()    Sets the current record's "Mediapicture_id" value
 * @method Team                setHomeaddressId()     Sets the current record's "Homeaddress_id" value
 * @method Team                setSporttype()         Sets the current record's "Sporttype" value
 * @method Team                setLeague()            Sets the current record's "League" value
 * @method Team                setMediapicture()      Sets the current record's "Mediapicture" value
 * @method Team                setAddress()           Sets the current record's "Address" value
 * @method Team                setSiteUsers()         Sets the current record's "SiteUsers" collection
 * @method Team                setFangroup()          Sets the current record's "Fangroup" collection
 * @method Team                setMtmSiteusers2team() Sets the current record's "MtmSiteusers2team" collection
 * @method Team                setSitevars()          Sets the current record's "Sitevars" collection
 * @method Team                setVote()              Sets the current record's "Vote" collection
 * 
 * @package    PhpProject2
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTeam extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('team');
        $this->hasColumn('id', 'integer', 4, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 250, array(
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 250,
             ));
        $this->hasColumn('websiteurl', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 255,
             ));
        $this->hasColumn('stadiumname', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 255,
             ));
        $this->hasColumn('phonenumber', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 20,
             ));
        $this->hasColumn('fax', 'string', 10, array(
             'type' => 'string',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 10,
             ));
        $this->hasColumn('createddate', 'timestamp', 25, array(
             'type' => 'timestamp',
             'notnull' => true,
             'unsigned' => false,
             'fixed' => 0,
             'length' => 25,
             ));
        $this->hasColumn('Sporttype_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('League_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('Mediapicture_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('Homeaddress_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Sporttype', array(
             'local' => 'Sporttype_id',
             'foreign' => 'id'));

        $this->hasOne('League', array(
             'local' => 'League_id',
             'foreign' => 'id'));

        $this->hasOne('Mediapicture', array(
             'local' => 'Mediapicture_id',
             'foreign' => 'id'));

        $this->hasOne('Address', array(
             'local' => 'Homeaddress_id',
             'foreign' => 'id'));

        $this->hasMany('Siteusers as SiteUsers', array(
             'refClass' => 'MtmSiteusers2team',
             'local' => 'team_id',
             'foreign' => 'siteusers_id'));

        $this->hasMany('Fangroup', array(
             'local' => 'id',
             'foreign' => 'Team_id'));

        $this->hasMany('MtmSiteusers2team', array(
             'local' => 'id',
             'foreign' => 'team_id'));

        $this->hasMany('Sitevars', array(
             'local' => 'id',
             'foreign' => 'Team_id'));

        $this->hasMany('Vote', array(
             'local' => 'id',
             'foreign' => 'Team_id'));
    }
}